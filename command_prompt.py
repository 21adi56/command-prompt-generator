# -*- coding: utf-8 -*-
"""Untitled3.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1Cd0tPay0Xvv-4ZtuRRVtBaHBXHr8RnyU
"""

# Commented out IPython magic to ensure Python compatibility.
# !pip install streamlit openai localtunnel
# %%writefile command_prompt_generator.py
# import streamlit as st
# from openai import OpenAI
# 
# st.title("ðŸ’» Command Prompt Generator (Gemini-powered)")
# st.write("Enter a task you want to perform, and I'll generate the best command for you.")
# 
# # Ask for API key (manual input for testing)
# api_key = st.text_input("Enter your Gemini API Key:", type="password")
# 
# task = st.text_area("ðŸ”¹ Describe the task (e.g., 'list files in a folder', 'create a new directory')")
# 
# if st.button("Generate Command"):
#     if not api_key:
#         st.error("Please enter your Gemini API key.")
#     elif not task.strip():
#         st.warning("Please describe a task.")
#     else:
#         try:
#             client = OpenAI(
#                 api_key=api_key,
#                 base_url="https://generativelanguage.googleapis.com/v1beta/openai/"
#             )
# 
#             response = client.chat.completions.create(
#                 model="gemini-2.5-flash",
#                 messages=[
#                     {"role": "system", "content": "You are a helpful assistant that generates correct Windows or Linux commands."},
#                     {"role": "user", "content": f"Generate a command for: {task}"}
#                 ]
#             )
# 
#             st.subheader("âœ… Suggested Command:")
#             st.code(response.choices[0].message.content, language="bash")
# 
#         except Exception as e:
#             st.error(f"Error: {str(e)}")

# Commented out IPython magic to ensure Python compatibility.
# 
# 
# 
# %%writefile command_prompt_generator.py
# import streamlit as st
# from openai import OpenAI
# 
# st.title("ðŸ’» Command Prompt Generator (Gemini API)")
# ...
# (rest of the Streamlit code here)



